!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	m_math.h	/^    Vec2 A;$/;"	m	struct:__anon4
B	m_math.h	/^    Vec2 B;$/;"	m	struct:__anon4
BUFFER_SIZE_HVC	v_memory.c	10;"	d	file:
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall $/;"	m
DEF_H	def.h	2;"	d
DEPS	Makefile	/^DEPS =  \\$/;"	m
DESCRIPTOR_SET_COUNT	r_pipeline.c	21;"	d	file:
D_INIT_H	d_display.h	5;"	d
D_XcbWindow	d_display.h	/^} D_XcbWindow;$/;"	t	typeref:struct:__anon10
FRAG	r_pipeline.c	/^enum shaderStageType { VERT, FRAG };$/;"	e	enum:shaderStageType	file:
FRAME_COUNT	v_def.h	5;"	d
Frame	r_render.h	/^} Frame;$/;"	t	typeref:struct:frame
FrameBuffer	r_render.h	/^} FrameBuffer;$/;"	t	typeref:struct:__anon6
GLSL	Makefile	/^GLSL = shaders$/;"	m
G_QUEUE_COUNT	v_def.h	6;"	d
I_Event	i_input.h	/^} I_Event;$/;"	t	typeref:struct:i_event
I_EventData	i_input.h	/^typedef uint32_t I_EventData;$/;"	t
I_EventType	i_input.h	/^} I_EventType;$/;"	t	typeref:enum:__anon11
I_INPUT_H	i_input.h	2;"	d
Image	r_render.h	/^} Image;$/;"	t	typeref:struct:__anon5
KEY_A	def.h	22;"	d
KEY_D	def.h	24;"	d
KEY_ESC	def.h	26;"	d
KEY_S	def.h	23;"	d
KEY_SPACE	def.h	25;"	d
KEY_W	def.h	21;"	d
LIBS	Makefile	/^LIBS = -lm -lvulkan -lxcb -lxcb-keysyms $/;"	m
MAX_BLOCKS	v_memory.c	13;"	d	file:
MAX_DESCRIPTOR_SETS	v_def.h	8;"	d
MAX_EVENTS	i_input.c	12;"	d	file:
MAX_PIPELINES	v_def.h	7;"	d
MEMORY_SIZE_DL	v_memory.c	12;"	d	file:
MEMORY_SIZE_HVC	v_memory.c	9;"	d	file:
M_MATH_H	m_math.h	2;"	d
Mat2	m_math.h	/^} Mat2;$/;"	t	typeref:struct:__anon2
NAME	Makefile	/^NAME = fizz$/;"	m
NS_PER_S	main.c	17;"	d	file:
NS_TARGET	main.c	15;"	d	file:
O	Makefile	/^O = build$/;"	m
OBJS	Makefile	/^OBJS =  \\$/;"	m
PI	m_math.h	6;"	d
PIPELINE_COUNT	r_pipeline.c	20;"	d	file:
R_COMMANDS_H	r_commands.h	2;"	d
R_EMIT_PIPELINE	r_pipeline.h	/^enum {R_OBJ_PIPELINE, R_EMIT_PIPELINE, R_POST_PROC_PIPELINE};$/;"	e	enum:__anon7
R_INIT_H	r_render.h	5;"	d
R_OBJ_PIPELINE	r_pipeline.h	/^enum {R_OBJ_PIPELINE, R_EMIT_PIPELINE, R_POST_PROC_PIPELINE};$/;"	e	enum:__anon7
R_PIPELINE_H	r_pipeline.h	2;"	d
R_POST_PROC_DESCRIPTOR_SET	r_pipeline.h	/^enum {R_POST_PROC_DESCRIPTOR_SET};$/;"	e	enum:__anon8
R_POST_PROC_PIPELINE	r_pipeline.h	/^enum {R_OBJ_PIPELINE, R_EMIT_PIPELINE, R_POST_PROC_PIPELINE};$/;"	e	enum:__anon7
Ray	m_math.h	/^} Ray;$/;"	t	typeref:struct:__anon3
SHADERS	Makefile	/^SHADERS =                         \\$/;"	m
SPV	Makefile	/^SPV  = shaders\/spv$/;"	m
Segment	m_math.h	/^} Segment;$/;"	t	typeref:struct:__anon4
UTILS_H	utils.h	2;"	d
V1_PRINT	def.h	12;"	d
V1_PRINT	def.h	14;"	d
VERBOSE	def.h	8;"	d
VERT	r_pipeline.c	/^enum shaderStageType { VERT, FRAG };$/;"	e	enum:shaderStageType	file:
VK_USE_PLATFORM_XCB_KHR	r_render.h	7;"	d
VK_USE_PLATFORM_XCB_KHR	v_def.h	4;"	d
V_DEF_H	v_def.h	2;"	d
V_MEMORY_H	v_memory.h	2;"	d
V_VIDEO_H	v_video.h	5;"	d
V_block	v_memory.h	/^} V_block;$/;"	t	typeref:struct:__anon9
Vec2	m_math.h	/^} Vec2;$/;"	t	typeref:struct:__anon1
WINDOW_HEIGHT	def.h	18;"	d
WINDOW_WIDTH	def.h	17;"	d
address	v_memory.h	/^    uint8_t*  address;$/;"	m	struct:__anon9
bitprint	utils.c	/^void bitprint(const void* const thing, const size_t bitcount)$/;"	f
blockCount	v_memory.c	/^static int blockCount = 0;$/;"	v	file:
blocks	v_memory.c	/^static V_block blocks[MAX_BLOCKS];$/;"	v	file:
bufferHostMapped	v_memory.c	/^static VkBuffer       bufferHostMapped;$/;"	v	file:
bytesAvailable	v_memory.c	/^static int bytesAvailable = BUFFER_SIZE_HVC;$/;"	v	file:
cleanUpPipelines	r_pipeline.c	/^void cleanUpPipelines()$/;"	f
colorFormat	r_render.c	/^const VkFormat colorFormat = VK_FORMAT_R8G8B8A8_SRGB;$/;"	v
commandBuffer	r_render.h	/^    VkCommandBuffer commandBuffer;$/;"	m	struct:frame
commandPool	r_render.h	/^    VkCommandPool   commandPool;$/;"	m	struct:frame
connection	d_display.h	/^    xcb_connection_t* connection;$/;"	m	struct:__anon10
curBufferOffset	v_memory.c	/^static int curBufferOffset = 0;$/;"	v	file:
curFrameIndex	r_render.c	/^uint32_t       curFrameIndex = 0;$/;"	v
d_CleanUp	d_display.c	/^void d_CleanUp(void)$/;"	f
d_Init	d_display.c	/^void d_Init(void)$/;"	f
d_XcbWindow	d_display.c	/^D_XcbWindow d_XcbWindow;$/;"	v
data	i_input.h	/^    I_EventData data;$/;"	m	struct:i_event
debugCallback	v_video.c	/^VkBool32 debugCallback(VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity,$/;"	f
debugMessenger	v_video.c	/^static VkDebugUtilsMessengerEXT debugMessenger;$/;"	v	file:
descriptorPool	r_pipeline.c	/^static VkDescriptorPool      descriptorPool;$/;"	v	file:
descriptorSetLayoutEmpty	r_pipeline.c	/^static VkDescriptorSetLayout descriptorSetLayoutEmpty; $/;"	v	file:
descriptorSetLayoutPostProcess	r_pipeline.c	/^static VkDescriptorSetLayout descriptorSetLayoutPostProcess; $/;"	v	file:
descriptorSets	r_pipeline.c	/^VkDescriptorSet descriptorSets[MAX_DESCRIPTOR_SETS];$/;"	v
device	v_video.c	/^VkDevice          device;$/;"	v
dir	m_math.h	/^    Vec2 dir;$/;"	m	struct:__anon3
eventHead	i_input.c	/^static int     eventHead;$/;"	v	file:
eventTail	i_input.c	/^static int     eventTail;$/;"	v	file:
events	i_input.c	/^static I_Event events[MAX_EVENTS];$/;"	v	file:
exit_game	main.c	/^jmp_buf exit_game;$/;"	v
fence	r_render.h	/^    VkFence         fence;$/;"	m	struct:frame
frame	r_render.h	/^typedef struct frame {$/;"	s
frameBuffer	r_render.h	/^    VkFramebuffer   frameBuffer;$/;"	m	struct:frame
frameCounter	v_video.c	/^uint64_t       frameCounter = 0;$/;"	v
frames	r_render.c	/^Frame          frames[FRAME_COUNT];$/;"	v
getKeyCode	i_input.c	/^static I_EventData getKeyCode(xcb_key_press_event_t* event)$/;"	f	file:
getVkVersion	v_video.c	/^static uint32_t getVkVersion(void)$/;"	f	file:
graphicsQueueFamilyIndex	v_video.c	/^uint32_t graphicsQueueFamilyIndex = UINT32_MAX; \/\/hopefully this causes obvious errors$/;"	v
graphicsQueues	v_video.c	/^VkQueue  graphicsQueues[G_QUEUE_COUNT];$/;"	v
handle	r_render.h	/^    VkFramebuffer   handle;$/;"	m	struct:__anon6
handle	r_render.h	/^    VkImage         handle;$/;"	m	struct:__anon5
hostBuffer	v_memory.c	/^uint8_t*              hostBuffer;$/;"	v
i_CleanUp	i_input.c	/^void i_CleanUp(void)$/;"	f
i_GetEvents	i_input.c	/^void i_GetEvents(void)$/;"	f
i_Init	i_input.c	/^void i_Init(void)$/;"	f
i_Keydown	i_input.h	/^    i_Keydown,$/;"	e	enum:__anon11
i_Keyup	i_input.h	/^    i_Keyup,$/;"	e	enum:__anon11
i_ProcessEvents	i_input.c	/^void i_ProcessEvents(void)$/;"	f
i_event	i_input.h	/^typedef struct i_event {$/;"	s
image	r_render.h	/^    Image           image;$/;"	m	struct:__anon6
imageAcquiredSemaphores	v_video.c	/^VkSemaphore    imageAcquiredSemaphores[FRAME_COUNT];$/;"	v
imageView	r_render.h	/^    VkImageView     imageView;$/;"	m	struct:frame
index	r_render.h	/^    uint32_t        index;$/;"	m	struct:frame
initDebugMessenger	v_video.c	/^static void initDebugMessenger(void)$/;"	f	file:
initDescriptorSets	r_pipeline.c	/^void initDescriptorSets(void)$/;"	f
initDescriptors	r_pipeline.c	/^void initDescriptors(void)$/;"	f
initDevice	v_video.c	/^static void initDevice(void)$/;"	f	file:
initFrameBuffers	r_render.c	/^static void initFrameBuffers(void)$/;"	f	file:
initFrames	r_render.c	/^static void initFrames(void)$/;"	f	file:
initOffscreenFrameBuffer	r_render.c	/^static void initOffscreenFrameBuffer(void)$/;"	f	file:
initPipelineLayouts	r_pipeline.c	/^static void initPipelineLayouts(void)$/;"	f	file:
initPipelines	r_pipeline.c	/^void initPipelines(void)$/;"	f
initQueues	v_video.c	/^static void initQueues(void)$/;"	f	file:
initRenderPasses	r_render.c	/^static void initRenderPasses(void)$/;"	f	file:
initShaderModule	r_pipeline.c	/^static void initShaderModule(const char* filepath, VkShaderModule* module)$/;"	f	file:
initSurface	v_video.c	/^static void initSurface(void)$/;"	f	file:
initSwapchain	v_video.c	/^static void initSwapchain(void)$/;"	f	file:
initVkInstance	v_video.c	/^static void initVkInstance(void)$/;"	f	file:
inspectAvailableExtensions	v_video.c	/^static void inspectAvailableExtensions(void)$/;"	f	file:
inspectAvailableLayers	v_video.c	/^static void inspectAvailableLayers(void)$/;"	f	file:
instance	v_video.c	/^static VkInstance instance;$/;"	v	file:
isMapped	v_memory.h	/^    bool      isMapped;$/;"	m	struct:__anon9
m_Add	m_math.c	/^void m_Add(const Vec2 v1, Vec2* v2)$/;"	f
m_Determinant	m_math.c	/^float m_Determinant(const Mat2 m)$/;"	f
m_Length	m_math.c	/^float m_Length(const Vec2 v)$/;"	f
m_Length2	m_math.c	/^float m_Length2(const Vec2 v)$/;"	f
m_Mat2Vec2Mul	m_math.c	/^static void m_Mat2Vec2Mul(const Mat2* m, Vec2* v)$/;"	f	file:
m_PolarToCart	m_math.c	/^Vec2 m_PolarToCart(const float angle, const float radius)$/;"	f
m_Rand	m_math.c	/^float m_Rand(void)$/;"	f
m_RandNeg	m_math.c	/^float m_RandNeg(void)$/;"	f
m_Rotate	m_math.c	/^void m_Rotate(const float angle, Vec2* v)$/;"	f
m_Scale	m_math.c	/^void m_Scale(const float s, Vec2* v)$/;"	f
m_Subtract	m_math.c	/^Vec2 m_Subtract(const Vec2 v1, const Vec2 v2)$/;"	f
m_Translate	m_math.c	/^void m_Translate(const Vec2 t, Vec2* v)$/;"	f
main	main.c	/^int main(int argc, char *argv[])$/;"	f
memoryDeviceLocal	v_memory.c	/^static VkDeviceMemory memoryDeviceLocal;$/;"	v	file:
memoryHostVisibleCoherent	v_memory.c	/^static VkDeviceMemory memoryHostVisibleCoherent;$/;"	v	file:
memoryProperties	v_memory.c	/^static VkPhysicalDeviceMemoryProperties memoryProperties;$/;"	v	file:
offscreenFrameBuffer	r_render.c	/^FrameBuffer    offscreenFrameBuffer;$/;"	v
offscreenRenderPass	r_render.c	/^VkRenderPass   offscreenRenderPass;$/;"	v
orig	m_math.h	/^    Vec2 orig;$/;"	m	struct:__anon3
pImage	r_render.h	/^    VkImage*        pImage;$/;"	m	struct:frame
pRenderPass	r_render.h	/^    VkRenderPass*   pRenderPass;$/;"	m	struct:__anon6
pRenderPass	r_render.h	/^    VkRenderPass*   pRenderPass;$/;"	m	struct:frame
pXcbKeySymbols	i_input.c	/^static xcb_key_symbols_t* pXcbKeySymbols;$/;"	v	file:
physicalDevice	v_video.c	/^VkPhysicalDevice  physicalDevice;$/;"	v
pipelineLayoutGeometry	r_pipeline.c	/^static VkPipelineLayout pipelineLayoutGeometry;$/;"	v	file:
pipelineLayoutPostProcess	r_pipeline.c	/^VkPipelineLayout pipelineLayoutPostProcess;$/;"	v
pipelines	r_pipeline.c	/^VkPipeline      pipelines[MAX_PIPELINES];$/;"	v
postEvent	i_input.c	/^static void postEvent(I_Event event)$/;"	f	file:
presentQueue	v_video.c	/^VkQueue  presentQueue;$/;"	v
printBuffer	utils.h	7;"	d
printBufferMemoryReqs	v_memory.c	/^static void printBufferMemoryReqs(const VkMemoryRequirements* reqs)$/;"	f	file:
printVec2	utils.c	/^void printVec2(const Vec2* vec)$/;"	f
r_CleanUp	r_render.c	/^void r_CleanUp(void)$/;"	f
r_Init	r_render.c	/^void r_Init(void)$/;"	f
r_InitRenderCommands	r_commands.c	/^void r_InitRenderCommands(void)$/;"	f
r_PresentFrame	r_render.c	/^void r_PresentFrame(void)$/;"	f
r_RequestFrame	r_render.c	/^Frame* r_RequestFrame(void)$/;"	f
r_UpdateRenderCommands	r_commands.c	/^void r_UpdateRenderCommands(void)$/;"	f
r_WaitOnQueueSubmit	r_render.c	/^void r_WaitOnQueueSubmit(void)$/;"	f
retrievePhysicalDevice	v_video.c	/^static VkPhysicalDevice retrievePhysicalDevice(void)$/;"	f	file:
sampler	r_render.h	/^    VkSampler       sampler;$/;"	m	struct:__anon5
semaphore	r_render.h	/^    VkSemaphore     semaphore;$/;"	m	struct:frame
shaderStageType	r_pipeline.c	/^enum shaderStageType { VERT, FRAG };$/;"	g	file:
size	v_memory.h	/^    size_t    size;$/;"	m	struct:__anon9
surface	v_video.c	/^static VkSurfaceKHR     surface;$/;"	v	file:
swapFormat	v_video.c	/^const VkFormat swapFormat = VK_FORMAT_B8G8R8A8_SRGB;$/;"	v
swapchain	v_video.c	/^VkSwapchainKHR   swapchain;$/;"	v
swapchainImages	v_video.c	/^VkImage        swapchainImages[FRAME_COUNT];$/;"	v
swapchainRenderPass	r_render.c	/^VkRenderPass   swapchainRenderPass;$/;"	v
type	i_input.h	/^    I_EventType type;$/;"	m	struct:i_event
vBuffer	v_memory.h	/^    VkBuffer* vBuffer;$/;"	m	struct:__anon9
vOffset	v_memory.h	/^    int       vOffset;$/;"	m	struct:__anon9
v_BindImageToMemory	v_memory.c	/^void v_BindImageToMemory(const VkImage image)$/;"	f
v_CleanUp	v_video.c	/^void v_CleanUp(void)$/;"	f
v_CleanUpMemory	v_memory.c	/^void v_CleanUpMemory()$/;"	f
v_Init	v_video.c	/^void v_Init(void)$/;"	f
v_InitMemory	v_memory.c	/^void v_InitMemory(void)$/;"	f
v_RequestBlock	v_memory.c	/^V_block* v_RequestBlock(const size_t size)$/;"	f
view	r_render.h	/^    VkImageView     view;$/;"	m	struct:__anon5
window	d_display.h	/^    xcb_window_t      window;$/;"	m	struct:__anon10
windowName	d_display.c	/^static const char* windowName = "floating";$/;"	v	file:
x	m_math.h	/^    float x;$/;"	m	struct:__anon1
x00	m_math.h	/^    float x00, x01, x10, x11;$/;"	m	struct:__anon2
x01	m_math.h	/^    float x00, x01, x10, x11;$/;"	m	struct:__anon2
x10	m_math.h	/^    float x00, x01, x10, x11;$/;"	m	struct:__anon2
x11	m_math.h	/^    float x00, x01, x10, x11;$/;"	m	struct:__anon2
y	m_math.h	/^    float y;$/;"	m	struct:__anon1
